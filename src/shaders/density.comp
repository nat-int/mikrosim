#version 450
#include "settings.glsl"

layout(local_size_x=64) in;
layout(push_constant) uniform push_t {
	uint pcount;
} push;
layout(std140, set=0, binding=0) buffer particles_t {
	particle data[];
} particles;
layout(std140, set=0, binding=1) readonly buffer counts_t {
	uint data[];
} counts;
layout(std140, set=0, binding=2) readonly buffer indices_t {
	uint data[];
} indices;
layout(std140, set=0, binding=3) buffer cell_t {
	particle_id data[];
} cells;

float density_contribution(float dist) {
	const float norm_const = 2 / 3.1415926535897; // from wolfram alpha with Integrate[(1-r)^3,{r,0,1},{a,0,2pi}] :)
	float x = 1 - dist;
	return x * x * x * norm_const;
}

void main() {
	uint particle_id = gl_GlobalInvocationID.x;
	if (particle_id < push.pcount) {
		if (particles.data[particle_id].type == 0) {
			  return;
		}
		vec2 adj_pos = particles.data[particle_id].pos + particles.data[particle_id].vel * .5f;
		uvec2 cell = uvec2(adj_pos);
		uint cell_id = cell.x + cell.y * CELLS_X;
		uint sorted_pos = counts.data[cell_id] + indices.data[particle_id];
		uint left_cell_id = (cell.x == 0 ? cell_id : cell_id - 1);
		uint right_cell_id = (cell.x == CELLS_X-1 ? cell_id : cell_id + 1);

		uvec2 top_range = (cell.y == 0 ? uvec2(0, 0) :
			uvec2(counts.data[left_cell_id-CELLS_X], counts.data[right_cell_id-CELLS_X+1]));
		uvec2 mid_range = uvec2(counts.data[left_cell_id], counts.data[right_cell_id+1]);
		uvec2 bot_range = (cell.y == CELLS_Y-1 ? uvec2(0, 0) :
			uvec2(counts.data[left_cell_id+CELLS_X], counts.data[right_cell_id+CELLS_X+1]));

		uint terminator = 256;
		float density = 0;
		float mix_density = 0;
		for (uint i = bot_range.y; i > bot_range.x;) {
			i--;
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				density += density_contribution(dist);
				mix_density += mix_factors[cells.data[i].type];
			}
			if (terminator < 1)
				break;
			terminator--;
		}
		for (uint i = mid_range.y; i > mid_range.x;) {
			i--;
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				density += density_contribution(dist);
				mix_density += mix_factors[cells.data[i].type];
			}
			if (terminator < 1)
				break;
			terminator--;
		}
		for (uint i = top_range.y; i > top_range.x;) {
			i--;
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				density += density_contribution(dist);
				mix_density += mix_factors[cells.data[i].type];
			}
			if (terminator < 1)
				break;
			terminator--;
		}

		particles.data[particle_id].density = density;
		cells.data[sorted_pos].density = density;
		cells.data[sorted_pos].concentration *= mix_density < 0.0001 ? 0 : 1 / mix_density;
	}
}

