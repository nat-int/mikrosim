#version 450
#include "settings.glsl"

layout(local_size_x=64) in;
layout(push_constant) uniform push_t {
	uint pcount;
	float global_density;
	float stiffness;
	float viscosity;
} push;
layout(std140, set=0, binding=0) readonly buffer particles_t {
	particle data[];
} particles;
layout(std140, set=0, binding=1) writeonly buffer particles_next_t {
	particle data[];
} particles_next;
layout(std140, set=0, binding=2) readonly buffer counts_t {
	uint data[];
} counts;
layout(std140, set=0, binding=3) readonly buffer cell_t {
	particle_id data[];
} cells;

const vec2 MAX_SPEED = vec2(0.1, 0.1);

float density_contribution_derivation(float dist) {
	const float c = -6 / 3.14159265358979323;
	float x = 1 - dist;
	return x * x * c; // <- D[2/pi * (1-x)^3,x]
}
float viscosity_contribution(float dist) { // there's no real reason to normalize it, it just feels nicer
	const float c = 6 / 5 / 3.14159265358979323; // Integrate[(1-r^2)(1-r),{r,0,1},{a,0,2pi}]
	return (1 - dist * dist) * (1 - dist) * c * push.viscosity;
}

float force(float dist, float density) {
	return (density - push.global_density) * push.stiffness * density_contribution_derivation(dist) / dist;
}

void main() {
	uint particle_id = gl_GlobalInvocationID.x;
	if (particle_id < push.pcount) {
		vec2 pos = particles.data[particle_id].pos;
		vec2 vel = particles.data[particle_id].vel;
		vec2 adj_pos = pos + vel * .5;
		float sd = particles.data[particle_id].density;
		uvec2 cell = uvec2(adj_pos);
		uint cell_id = cell.x + cell.y * CELLS_X;
		uint left_cell_id = (cell.x == 0 ? cell_id : cell_id - 1);
		uint right_cell_id = (cell.x == CELLS_X-1 ? cell_id : cell_id + 1);

		uvec2 top_range = (cell.y == 0 ? uvec2(0, 0) :
			uvec2(counts.data[left_cell_id-CELLS_X], counts.data[right_cell_id-CELLS_X+1]));
		uvec2 mid_range = uvec2(counts.data[left_cell_id], counts.data[right_cell_id+1]);
		uvec2 bot_range = (cell.y == CELLS_Y-1 ? uvec2(0, 0) :
			uvec2(counts.data[left_cell_id+CELLS_X], counts.data[right_cell_id+CELLS_X+1]));

		uint terminator = 128;
		for (uint i = top_range.x; i < top_range.y; i++) {
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				vel += rp * force(dist, (sd + cells.data[i].density) * .5);
				vel += viscosity_contribution(dist) * (cells.data[i].vel - vel);
			}
			if (terminator < 1)
				break;
			terminator--;
		}
		for (uint i = mid_range.x; i < mid_range.y; i++) {
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) { // since rp is 0 when interacting with itself, there's no need to check for it
				vel += rp * force(dist, (sd + cells.data[i].density) * .5);
				vel += viscosity_contribution(dist) * (cells.data[i].vel - vel);
			}
			if (terminator < 1)
				break;
			terminator--;
		}
		for (uint i = bot_range.x; i < bot_range.y; i++) {
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				vel += rp * force(dist, (sd + cells.data[i].density) * .5);
				vel += viscosity_contribution(dist) * (cells.data[i].vel - vel);
			}
			if (terminator < 1)
				break;
			terminator--;
		}

		vel = clamp(vel, -MAX_SPEED, MAX_SPEED);
		pos += vel;
		const vec2 center = vec2(CELLS_X * .5, CELLS_Y * .5);
		vec2 center_offset = vec2(adj_pos - center);
		vel += normalize(center_offset.yx * vec2(-1, 1) + center_offset) * 0.00001;
		if (pos.x > CELLS_X) { pos.x = 2*CELLS_X - pos.x; vel.x = -vel.x; }
		if (pos.x < 0) { pos.x = -pos.x; vel.x = -vel.x; }
		if (pos.y > CELLS_Y) { pos.y = 2*CELLS_Y - pos.y; vel.y = -vel.y; }
		if (pos.y < 0) { pos.y = -pos.y; vel.y = -vel.y; }
		particles_next.data[particle_id].pos = pos + vel;
		particles_next.data[particle_id].vel = vel;
		particles_next.data[particle_id].debug_tags = counts.data[cell_id];
	}
}

