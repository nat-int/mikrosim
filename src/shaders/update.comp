#version 450
#include "settings.glsl"

layout(local_size_x=64) in;
struct ch_bl {
	vec2 pos;
	float tconc;
	float strength;
	vec2 ext;
	float delta;
	uint comp;
};
struct f_bl {
	vec4 pos_ext;
	vec4 cart_polar;
};
layout(push_constant, std430) uniform push_t {
	uvec4 mix_comps;
	uint pcount;
	float global_density;
	float stiffness;
	float viscosity;
} push;
layout(std140, set=0, binding=0) uniform uniform_t {
	f_bl fbl[4];
	ch_bl chbl[4];
} unif;
layout(std140, set=0, binding=1) readonly buffer particles_t {
	particle data[];
} particles;
layout(std140, set=0, binding=2) writeonly buffer particles_next_t {
	particle data[];
} particles_next;
layout(std140, set=0, binding=3) readonly buffer counts_t {
	uint data[];
} counts;
layout(std140, set=0, binding=4) readonly buffer cell_t {
	particle_id data[];
} cells;
layout(std140, set=0, binding=5) writeonly buffer concentrations_t {
	vec4 data[];
} concentrations;

const vec2 MAX_SPEED = vec2(0.5, 0.5);

float density_contribution(float dist) {
	const float norm_const = 2 / 3.1415926535897; // from wolfram alpha with Integrate[(1-r)^3,{r,0,1},{a,0,2pi}] :)
	float x = 1 - dist;
	return x * x * x * norm_const;
}
float density_contribution_derivation(float dist) {
	const float c = -6 / 3.14159265358979323;
	float x = 1 - dist;
	return x * x * c; // <- D[2/pi * (1-x)^3,x]
}
float viscosity_contribution(float dist) { // there's no real reason to normalize it, it just feels nicer
	const float c = 6 / 5 / 3.14159265358979323; // Integrate[(1-r^2)(1-r),{r,0,1},{a,0,2pi}]
	return (1 - dist * dist) * (1 - dist) * c * push.viscosity;
}

float force(float dist, float density) {
	return (density - push.global_density) * push.stiffness * density_contribution_derivation(dist) / dist;
}

vec2 bond(vec2 pos, vec2 vel, uint bonded) {
	const float bond_len = 0.2;
	const float bond_strength = .0005;
	const float bond_damping = .2;
	vec2 d = particles.data[bonded].pos - pos;
	vec2 nd = normalize(d);
	vec2 o = nd * (bond_strength / bond_len) * (length(d) - bond_len);
	vec2 rv = particles.data[bonded].vel - vel - 2*o; // other particle's velocity gets affected by the spring too
	o += nd * bond_damping * dot(rv, nd);
	return o;
}

void main() {
	uint particle_id = gl_GlobalInvocationID.x;
	if (particle_id < push.pcount) {
		uint type = particles.data[particle_id].type;
		particles_next.data[particle_id].type = type;
		if (type == 0) {
			return;
		}
		vec2 pos = particles.data[particle_id].pos;
		vec2 vel = particles.data[particle_id].vel;
		vec2 adj_pos = pos + vel * .5;
		float sd = particles.data[particle_id].density;
		uvec2 cell = uvec2(adj_pos);
		uint cell_id = cell.x + cell.y * CELLS_X;
		uint left_cell_id = (cell.x == 0 ? cell_id : cell_id - 1);
		uint right_cell_id = (cell.x == CELLS_X-1 ? cell_id : cell_id + 1);

		uvec2 top_range = (cell.y == 0 ? uvec2(0, 0) :
			uvec2(counts.data[left_cell_id-CELLS_X], counts.data[right_cell_id-CELLS_X+1]));
		uvec2 mid_range = uvec2(counts.data[left_cell_id], counts.data[right_cell_id+1]);
		uvec2 bot_range = (cell.y == CELLS_Y-1 ? uvec2(0, 0) :
			uvec2(counts.data[left_cell_id+CELLS_X], counts.data[right_cell_id+CELLS_X+1]));

		vec4 concs = vec4(0, 0, 0, 0);

		uint terminator = 256;
		for (uint i = top_range.x; i < top_range.y; i++) {
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				vel += rp * force(dist, (sd + cells.data[i].density) * .5);
				vel += viscosity_contribution(dist) * (cells.data[i].vel - vel);
				concs += cells.data[i].concentration * mix_factors[type];
			}
			if (terminator < 1)
				break;
			terminator--;
		}
		for (uint i = mid_range.x; i < mid_range.y; i++) {
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				// since rp/rel velocity is 0 when interacting with itself, there's no need to check for it
				vel += rp * force(dist, (sd + cells.data[i].density) * .5);
				vel += viscosity_contribution(dist) * (cells.data[i].vel - vel);
				// here it depends on counting in itself for conservation of "mass"
				concs += cells.data[i].concentration * mix_factors[type];
			}
			if (terminator < 1)
				break;
			terminator--;
		}
		for (uint i = bot_range.x; i < bot_range.y; i++) {
			vec2 rp = cells.data[i].pos - adj_pos;
			float dist = max(length(rp), 0.0001);
			if (dist < 1.0) {
				vel += rp * force(dist, (sd + cells.data[i].density) * .5);
				vel += viscosity_contribution(dist) * (cells.data[i].vel - vel);
				concs += cells.data[i].concentration * mix_factors[type];
			}
			if (terminator < 1)
				break;
			terminator--;
		}

		for (uint i = 0; i < 4; i++) {
			vec2 rp = unif.fbl[i].pos_ext.xy - pos;
			if (all(lessThan(abs(rp), unif.fbl[i].pos_ext.zw))) {
				vel += unif.fbl[i].cart_polar.xy;
				vel += mat2(vec2(-rp.y, rp.x), rp) * unif.fbl[i].cart_polar.zw;
			}
		}
		for (uint i = 0; i < 4; i++) {
			for (uint j = 0; j < 4; j++) {
				if (push.mix_comps[j] == unif.chbl[i].comp &&
					all(lessThan(abs(unif.chbl[i].pos - pos), unif.chbl[i].ext))) {
					concs[j] = max(0.f, mix(concs[j], unif.chbl[i].tconc, unif.chbl[i].strength) +
						unif.chbl[i].delta);
				}
			}
		}
		concentrations.data[particle_id] = concs;

		uint bond_a = particles.data[particle_id].bond_a;
		uint bond_b = particles.data[particle_id].bond_b;
		if (type > 1) { // this branch should be mostly consistent in work groups since the types are grouped
			vec2 ov = vel;
			if (bond_a != 0xffffffffu) {
				vel += bond(pos, ov, bond_a);
			}
			if (bond_b != 0xffffffffu) {
				vel += bond(pos, ov, bond_b);
			}
		}

		vel = clamp(vel, -MAX_SPEED, MAX_SPEED);
		pos += vel;
		if (pos.x > CELLS_X) { pos.x = 2*CELLS_X - pos.x; vel.x = -vel.x; }
		if (pos.x < 0) { pos.x = -pos.x; vel.x = -vel.x; }
		if (pos.y > CELLS_Y) { pos.y = 2*CELLS_Y - pos.y; vel.y = -vel.y; }
		if (pos.y < 0) { pos.y = -pos.y; vel.y = -vel.y; }
		particles_next.data[particle_id].pos = pos + vel;
		particles_next.data[particle_id].vel = vel;
		particles_next.data[particle_id].type = type;
		particles_next.data[particle_id].bond_a = bond_a;
		particles_next.data[particle_id].bond_b = bond_b;
	}
}

